#include<iostream>
#include<vector>
#include<climits>
using namespace std;

class SGTree{
    vector<int>seg;
    public:
    SGTree(int n){
        seg.resize(4*n + 1);
    }

    void build(int ind, int low, int high, int arr[]){
        if(low == high){
            seg[ind] = arr[low];
            return;
        }
        int mid = (low + high)/2;
        build(2*ind+1,low,mid,arr); //LEFT
        build(2*ind+2,mid+1,high,arr); //RIGHT
        seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);
    }

    int query(int ind,int low,int high,int l,int r){
        //NO-OVERLAP
        if(high < l || r < low) return INT_MAX;
        //COMLETE OVERLAP
        if(low >= l && high <= r) return seg[ind];
        //PARTIAL OVERLAP
        int mid = (low + high)/2;
        int left = query(2*ind+1,low,mid,l,r);
        int right = query(2*ind+2,mid+1,high,l,r);
        return min(left,right);
    }

    void update(int ind,int low,int high,int i,int val){
        if(low == high){
            seg[ind] = val;
            return;
        }
        int mid = (low+high)/2;
        if(i <= mid) update(2*ind+1,low,mid,i,val);
        else update(2*ind+2,mid+1,high,i,val);
        seg[ind] = min(seg[2*ind+1],seg[2*ind+2]);
    }
};

int main(){
    int n,q;
    cin>>n>>q;
    int arr[n+1];
    for(int i = 1; i <=n; i++) cin>>arr[i]; // 1-Based indexing
    SGTree sg1(n);
    sg1.build(1,1,n,arr);
    
    while(q--){
        int type;
        cin>>type;
        if(type == 2){
            int l,r;
            cin>>l>>r;
            cout<<sg1.query(1,1,n,l,r)<<endl;
        }
        else{
            int i,val;
            cin>>i>>val;
            sg1.update(1,1,n,i,val);
            arr[i]=val;
        }
    }

    return 0;
}
